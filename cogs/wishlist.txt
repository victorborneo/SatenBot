import discord
from discord.ext import commands

from variables import connection  # pylint: disable=import-error
from variables import emoji_linker  # pylint: disable=import-error
from functions import send_message  # pylint: disable=import-error
from functions import paginator  # pylint: disable=import-error
from functions import confirm  # pylint: disable=import-error
from functions import multiple_choices  # pylint: disable=import-error


class Wishlist(commands.Cog):
    """
    Commands related to the Wishlist.
    """

    def __init__(self, client):
        self.client = client

    @commands.cooldown(1, 3, commands.BucketType.user)
    @commands.command(brief="See yours or someone's wishlist!",
                      aliases=["wl"])
    @commands.guild_only()
    async def wishlist(self, ctx, member: discord.Member = None):
        """
        See yours or someone's wishlist!
        Animes on the wishlist have a slightly higher chance of
        showing up!
        """
        if member is None:
            member = ctx.message.author
        cursor = connection.cursor()
        wl = cursor.execute("""
            SELECT anime.rank, anime.name, obtains.anime_id
            FROM wishes
            JOIN anime ON (wishes.anime_id=anime.id)
            LEFT JOIN obtains ON
            (obtains.anime_id=anime.id
            AND obtains.user_id=:uid
            AND obtains.guild_id=:gid)
            WHERE wishes.user_id=:uid
            AND wishes.guild_id=:gid
        """, {
            "uid": member.id,
            "gid": ctx.message.guild.id
        }).fetchall()
        cursor.close()

        if not len(wl):
            await send_message(ctx, f"{member.mention}'s wishlist's empty!")
            return

        await paginator(ctx, self.client, [discord.Embed(
            title=f"{member} Collection List Page {(i + 20) // 20}",
            description="\n".join(
                map(lambda x: f"**#{x['rank']}** - {x['name']} "
                    f"{'✅' if x['anime_id'] is not None else ''}",
                    wl[i:i+20])),
            color=0x620db8
        ) for i in range(0, len(wl), 20)])

    @commands.cooldown(1, 3, commands.BucketType.user)
    @commands.command(brief="Add a sticker to your wishlist!")
    @commands.guild_only()
    async def wish(self, ctx, *, name):
        """
        Add a sticker to your wishlist!
        Animes on the wishlist have a slightly higher chance of
        showing up!
        """
        cursor = connection.cursor()
        check = cursor.execute("""
            SELECT COUNT(*) AS c, user_guild_data.wl_limit
            FROM wishes
            JOIN user_guild_data ON (user_guild_data.user_id=:uid
                AND user_guild_data.guild_id=:gid)
            WHERE wishes.user_id=:uid
            AND wishes.guild_id=:gid
            LIMIT 1
        """, {
            "uid": ctx.message.author.id,
            "gid": ctx.message.guild.id,
        }).fetchone()

        if check["wl_limit"] is not None and \
                check["c"] >= check["wl_limit"]:
            cursor.close()
            await send_message(ctx, "Wishlist's full!")
            return

        results = cursor.execute("""
            SELECT id, name FROM anime
            WHERE (name LIKE :name
            OR alt_name LIKE :name)
            AND rank <= 10000
            AND NOT EXISTS
            (SELECT * FROM wishes
            WHERE user_id=:uid
            AND guild_id=:gid
            AND anime_id=anime.id)
            ORDER BY rank LIMIT 10
        """, {
            "uid": ctx.message.author.id,
            "gid": ctx.message.guild.id,
            "name": f"%{name}%"
        }).fetchall()

        if not len(results):
            cursor.close()
            await send_message(ctx, "No results with such name or "
                               "the anime is already in your wishlist.\n"
                               "Also, only top 10,000 animes are elegiable.")
            return

        text = "\n".join([f"{count} -> {anime['name']}" for count,
                          anime in enumerate(results)])

        confirm = await multiple_choices(ctx, self.client, f"```{text}```")
        confirm = results[emoji_linker[str(confirm.emoji)]]

        cursor.execute("""
            INSERT OR IGNORE INTO user (id, username)
            VALUES (:uid, :name)
        """, {"uid": ctx.message.author.id,
              "name": f"{ctx.message.author.name}"
              f"#{ctx.message.author.discriminator}"})

        cursor.execute("""
            INSERT INTO wishes (user_id, guild_id, anime_id)
            VALUES (:uid, :gid, :aid)
        """, {
            "uid": ctx.message.author.id,
            "gid": ctx.message.guild.id,
            "aid": confirm["id"]
        })
        connection.commit()
        cursor.close()
        await ctx.message.add_reaction("✅")

    @commands.cooldown(1, 3, commands.BucketType.user)
    @commands.command(brief="Remove a sticker from your wishlist!")
    @commands.guild_only()
    async def unwish(self, ctx, *, name):
        """
        Remove a sticker from your wishlist!
        """
        cursor = connection.cursor()
        results = cursor.execute("""
            SELECT id, name FROM anime
            WHERE (name LIKE :name
            OR alt_name LIKE :name)
            AND EXISTS
            (SELECT * FROM wishes
            WHERE user_id=:uid
            AND guild_id=:gid
            AND anime_id=anime.id)
            ORDER BY rank LIMIT 10
        """, {
            "uid": ctx.message.author.id,
            "gid": ctx.message.guild.id,
            "name": f"%{name}%"
        }).fetchall()

        if not len(results):
            await send_message(ctx, "No results with such name "
                               "on your wishlist.")
            return

        text = "\n".join([f"{count} -> {anime['name']}" for count,
                          anime in enumerate(results)])

        confirm = await multiple_choices(ctx, self.client, f"```{text}```")
        confirm = results[emoji_linker[str(confirm.emoji)]]

        cursor.execute("""
            DELETE FROM wishes
            WHERE user_id=:uid
            AND guild_id=:gid
            AND anime_id=:aid
        """, {
            "uid": ctx.message.author.id,
            "gid": ctx.message.guild.id,
            "aid": confirm["id"]
        })
        connection.commit()
        cursor.close()
        await ctx.message.add_reaction("✅")

    @commands.cooldown(1, 3, commands.BucketType.user)
    @commands.command(brief="Reemove a sticker to your wishlist!",
                      aliases=["clearwl", "cwl", "clrwl"])
    @commands.guild_only()
    async def clearwishlist(self, ctx):
        """
        Clear your wishlist entirely.
        """

        check = await confirm(ctx, self.client,
                              f"{ctx.message.author.mention}, "
                              "Are you sure you want to clear your wishlist?")

        if str(check.emoji) == "❌":
            return

        cursor = connection.cursor()
        cursor.execute("""
            SELECT * FROM wishes
            WHERE user_id=:uid
            AND guild_id=:gid
        """, {
            "uid": ctx.message.author.id,
            "gid": ctx.message.guild.id
        })
        if not len(cursor.fetchall()):
            cursor.close()
            await send_message(ctx, "Wishlist's already empty!")
            return

        cursor.execute("""
            DELETE FROM wishes
            WHERE user_id=:uid
            AND guild_id=:gid
        """, {
            "uid": ctx.message.author.id,
            "gid": ctx.message.guild.id
        })
        connection.commit()
        cursor.close()
        await send_message(ctx, "Wishlist wiped successfully.")


def setup(client):
    """
    Setup the Cog.
    """
    client.add_cog(Wishlist(client))
